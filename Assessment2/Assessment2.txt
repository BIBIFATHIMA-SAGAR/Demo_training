//1
null pointer exception

//2
Exception is abnormal condition that may interrupt the normal flow of program execution
Exception handling is mechanishm to handle the exceptions so the normal flow can be maintained

Java exception handling is managed via five keywords: try, catch, throw, throws, and finally.


//3
userdefined exceptions are called as custom exceptions
Custom exceptions provide the flexibility to add attributes and methods that are not part of a standard Java exception




//4
Encapsulation in Java is a mechanism of wrapping the data (variables) and code acting on the data (methods) together as a single unit.
1. Class should be public
2. Properties should be private
3.Public getter and setter methods
4.Atleast 1 default constructor
5.class should not be final



//5
Polymorphism in Java is the ability of an object to take many forms.
1.Runtime Polymorphism
2.CompileTime Polymorphism


//6
 - 2 or more methods having same name but diff parameters in same class is known as Method Overloading.

E.g.,
public class Adder {
	public int add(int a,int b) {
		return (a+b);
	}
	
	public int add(int x, int y, int z) {
		return(x+y+z);
	}

}
public class TestAdder {
	public static void main(String[] args) {
		Adder a = new Adder();
		System.out.println(a.add(2, 3));
		System.out.println(a.add(3, 4, 5));
	}

}


//7
Overriding - If child class has the same method as declared in the parent class , it is known as Method Overriding.

public class Vehicle {
	
	void drive() {
		System.out.println("driving a vehicle");
	}

}
public class Car extends Vehicle {
	
	public void drive() {
		// TODO Auto-generated method stub
		super.drive();
		System.out.println("driving car");
	}

}
public class TestOverride {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Car car= new Car();
		car.drive();

	}

}


//8
args


//9

Output- Error : method provideTraining() is already defined in class Institutes


//10

Output-Error
Institues is a class not a interface so we cannot implement it



//11
Abstraction is the concept of object-oriented programming that "shows" only essential attributes and "hides" unnecessary information. 
The main purpose of abstraction is hiding the unnecessary details from the users.

we can achieve abstraction in two ways: abstract class (0 to 100%) and interface (100%)



//12
variable
int x = 10;
or
int x;
x=10







